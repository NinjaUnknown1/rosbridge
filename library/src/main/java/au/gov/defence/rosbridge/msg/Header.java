package au.gov.defence.rosbridge.msg;

import org.json.JSONException;
import org.json.JSONObject;

/**
 * std_msgs/Header Message
 * File: std_msgs/Header.msg
 * Raw Message Definition
 * # Standard metadata for higher-level stamped data types.
 * # This is generally used to communicate timestamped data
 * # in a particular coordinate frame.
 * #
 * # sequence ID: consecutively increasing ID
 * uint32 seq
 * #Two-integer timestamp that is expressed as:
 * # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
 * # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
 * # time-handling sugar is provided by the client library
 * time stamp
 * #Frame this data is associated with
 * string frame_id
 * <p>
 * Compact Message Definition
 * uint32 seq
 * time stamp
 * string frame_id
 * autogenerated on Thu, 13 Feb 2020 04:02:12
 */

public class Header extends Message {

    private int mSeq = 0;
    private long mStamp_sec, mStamp_nsec;
    private String mFrameId;

    public Header() { this(0, 0,"dst_rosbridge"); }

    public Header(int inSec, int inNSec, String inFrameId) {
        super();
        mStamp_sec = inSec;
        mStamp_nsec = inNSec;
        mFrameId = inFrameId;
    }

    // to create object from recieved JSON object, used in CompressedImageMessage
    public Header(JSONObject json){
        // uses the 'header' jsonObject, not the whole message
        try {
            mSeq = json.getInt("seq");
            mStamp_sec = json.getJSONObject("stamp").getLong("secs");
            mStamp_nsec = json.getJSONObject("stamp").getLong("nsecs");
            mFrameId = json.getString("frame_id");
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    public void setNSec(int inNSec) {
        mStamp_nsec = inNSec;
    }

    public void setSec(int inSec) {
        mStamp_sec = inSec;
    }

    public void setSeq(int seq){ this.mSeq = seq; }

    @Override
    public JSONObject getJSON() {
        try {
            mStamp_sec = System.currentTimeMillis() / 1000;
            JSONObject stamp = new JSONObject();
            JSONObject header = new JSONObject();
            stamp.put("secs", mStamp_sec);
            stamp.put("nsecs", mStamp_nsec);
            header.put("stamp", stamp);
            header.put("seq", mSeq);
            header.put("frame_id", mFrameId);
            mSeq++;
            return header;
        } catch (JSONException jse) {
            jse.printStackTrace();
        }
        return null;
    }

    @Override
    public Message updateMessage(JSONObject inJSONObject) {
        return this;
    }
}